# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import generated.stock_exchange_pb2 as stock__exchange__pb2


class StockExchangeInformatorStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.observe = channel.unary_stream(
                '/stockExchange.StockExchangeInformator/observe',
                request_serializer=stock__exchange__pb2.ObserveRequest.SerializeToString,
                response_deserializer=stock__exchange__pb2.StockInfo.FromString,
                )
        self.ping = channel.unary_unary(
                '/stockExchange.StockExchangeInformator/ping',
                request_serializer=stock__exchange__pb2.Empty.SerializeToString,
                response_deserializer=stock__exchange__pb2.Empty.FromString,
                )


class StockExchangeInformatorServicer(object):
    """Missing associated documentation comment in .proto file"""

    def observe(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StockExchangeInformatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'observe': grpc.unary_stream_rpc_method_handler(
                    servicer.observe,
                    request_deserializer=stock__exchange__pb2.ObserveRequest.FromString,
                    response_serializer=stock__exchange__pb2.StockInfo.SerializeToString,
            ),
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=stock__exchange__pb2.Empty.FromString,
                    response_serializer=stock__exchange__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stockExchange.StockExchangeInformator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StockExchangeInformator(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def observe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/stockExchange.StockExchangeInformator/observe',
            stock__exchange__pb2.ObserveRequest.SerializeToString,
            stock__exchange__pb2.StockInfo.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stockExchange.StockExchangeInformator/ping',
            stock__exchange__pb2.Empty.SerializeToString,
            stock__exchange__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
