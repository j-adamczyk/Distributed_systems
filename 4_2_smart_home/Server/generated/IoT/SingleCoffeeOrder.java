//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `IoT.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IoT;

public class SingleCoffeeOrder implements java.lang.Cloneable,
                                          java.io.Serializable
{
    public CoffeeType coffeeType;

    public short temperature;

    public short volume;

    public SingleCoffeeOrder()
    {
        this.coffeeType = CoffeeType.ESPRESSO;
    }

    public SingleCoffeeOrder(CoffeeType coffeeType, short temperature, short volume)
    {
        this.coffeeType = coffeeType;
        this.temperature = temperature;
        this.volume = volume;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        SingleCoffeeOrder r = null;
        if(rhs instanceof SingleCoffeeOrder)
        {
            r = (SingleCoffeeOrder)rhs;
        }

        if(r != null)
        {
            if(this.coffeeType != r.coffeeType)
            {
                if(this.coffeeType == null || r.coffeeType == null || !this.coffeeType.equals(r.coffeeType))
                {
                    return false;
                }
            }
            if(this.temperature != r.temperature)
            {
                return false;
            }
            if(this.volume != r.volume)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::IoT::SingleCoffeeOrder");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, coffeeType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, temperature);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, volume);
        return h_;
    }

    public SingleCoffeeOrder clone()
    {
        SingleCoffeeOrder c = null;
        try
        {
            c = (SingleCoffeeOrder)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        CoffeeType.ice_write(ostr, this.coffeeType);
        ostr.writeShort(this.temperature);
        ostr.writeShort(this.volume);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.coffeeType = CoffeeType.ice_read(istr);
        this.temperature = istr.readShort();
        this.volume = istr.readShort();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, SingleCoffeeOrder v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public SingleCoffeeOrder ice_read(com.zeroc.Ice.InputStream istr)
    {
        SingleCoffeeOrder v = new SingleCoffeeOrder();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<SingleCoffeeOrder> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, SingleCoffeeOrder v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<SingleCoffeeOrder> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(SingleCoffeeOrder.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final SingleCoffeeOrder _nullMarshalValue = new SingleCoffeeOrder();

    /** @hidden */
    public static final long serialVersionUID = 1357544566L;
}
