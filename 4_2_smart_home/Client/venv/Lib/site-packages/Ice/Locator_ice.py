# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `Locator.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import Ice.Identity_ice
import Ice.Process_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Ice
__name__ = 'Ice'

if 'AdapterNotFoundException' not in _M_Ice.__dict__:
    _M_Ice.AdapterNotFoundException = Ice.createTempClass()
    class AdapterNotFoundException(Ice.UserException):
        """
        This exception is raised if an adapter cannot be found.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::AdapterNotFoundException'

    _M_Ice._t_AdapterNotFoundException = IcePy.defineException('::Ice::AdapterNotFoundException', AdapterNotFoundException, (), False, None, ())
    AdapterNotFoundException._ice_type = _M_Ice._t_AdapterNotFoundException

    _M_Ice.AdapterNotFoundException = AdapterNotFoundException
    del AdapterNotFoundException

if 'InvalidReplicaGroupIdException' not in _M_Ice.__dict__:
    _M_Ice.InvalidReplicaGroupIdException = Ice.createTempClass()
    class InvalidReplicaGroupIdException(Ice.UserException):
        """
        This exception is raised if the replica group provided by the
        server is invalid.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::InvalidReplicaGroupIdException'

    _M_Ice._t_InvalidReplicaGroupIdException = IcePy.defineException('::Ice::InvalidReplicaGroupIdException', InvalidReplicaGroupIdException, (), False, None, ())
    InvalidReplicaGroupIdException._ice_type = _M_Ice._t_InvalidReplicaGroupIdException

    _M_Ice.InvalidReplicaGroupIdException = InvalidReplicaGroupIdException
    del InvalidReplicaGroupIdException

if 'AdapterAlreadyActiveException' not in _M_Ice.__dict__:
    _M_Ice.AdapterAlreadyActiveException = Ice.createTempClass()
    class AdapterAlreadyActiveException(Ice.UserException):
        """
        This exception is raised if a server tries to set endpoints for
        an adapter that is already active.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::AdapterAlreadyActiveException'

    _M_Ice._t_AdapterAlreadyActiveException = IcePy.defineException('::Ice::AdapterAlreadyActiveException', AdapterAlreadyActiveException, (), False, None, ())
    AdapterAlreadyActiveException._ice_type = _M_Ice._t_AdapterAlreadyActiveException

    _M_Ice.AdapterAlreadyActiveException = AdapterAlreadyActiveException
    del AdapterAlreadyActiveException

if 'ObjectNotFoundException' not in _M_Ice.__dict__:
    _M_Ice.ObjectNotFoundException = Ice.createTempClass()
    class ObjectNotFoundException(Ice.UserException):
        """
        This exception is raised if an object cannot be found.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::ObjectNotFoundException'

    _M_Ice._t_ObjectNotFoundException = IcePy.defineException('::Ice::ObjectNotFoundException', ObjectNotFoundException, (), False, None, ())
    ObjectNotFoundException._ice_type = _M_Ice._t_ObjectNotFoundException

    _M_Ice.ObjectNotFoundException = ObjectNotFoundException
    del ObjectNotFoundException

if 'ServerNotFoundException' not in _M_Ice.__dict__:
    _M_Ice.ServerNotFoundException = Ice.createTempClass()
    class ServerNotFoundException(Ice.UserException):
        """
        This exception is raised if a server cannot be found.
        """
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Ice::ServerNotFoundException'

    _M_Ice._t_ServerNotFoundException = IcePy.defineException('::Ice::ServerNotFoundException', ServerNotFoundException, (), False, None, ())
    ServerNotFoundException._ice_type = _M_Ice._t_ServerNotFoundException

    _M_Ice.ServerNotFoundException = ServerNotFoundException
    del ServerNotFoundException

if 'LocatorRegistry' not in _M_Ice.__dict__:
    _M_Ice._t_LocatorRegistryDisp = IcePy.declareClass('::Ice::LocatorRegistry')
    _M_Ice._t_LocatorRegistryPrx = IcePy.declareProxy('::Ice::LocatorRegistry')

_M_Ice._t_Locator = IcePy.defineValue('::Ice::Locator', Ice.Value, -1, (), False, True, None, ())

if 'LocatorPrx' not in _M_Ice.__dict__:
    _M_Ice.LocatorPrx = Ice.createTempClass()
    class LocatorPrx(Ice.ObjectPrx):

        """
        Find an object by identity and return a proxy that contains
        the adapter ID or endpoints which can be used to access the
        object.
        Arguments:
        id -- The identity.
        context -- The request context for the invocation.
        Returns: The proxy, or null if the object is not active.
        Throws:
        ObjectNotFoundException -- Raised if the object cannot be found.
        """
        def findObjectById(self, id, context=None):
            return _M_Ice.Locator._op_findObjectById.invoke(self, ((id, ), context))

        """
        Find an object by identity and return a proxy that contains
        the adapter ID or endpoints which can be used to access the
        object.
        Arguments:
        id -- The identity.
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findObjectByIdAsync(self, id, context=None):
            return _M_Ice.Locator._op_findObjectById.invokeAsync(self, ((id, ), context))

        """
        Find an object by identity and return a proxy that contains
        the adapter ID or endpoints which can be used to access the
        object.
        Arguments:
        id -- The identity.
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findObjectById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Ice.Locator._op_findObjectById.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        Find an object by identity and return a proxy that contains
        the adapter ID or endpoints which can be used to access the
        object.
        Arguments:
        id -- The identity.
        Returns: The proxy, or null if the object is not active.
        Throws:
        ObjectNotFoundException -- Raised if the object cannot be found.
        """
        def end_findObjectById(self, _r):
            return _M_Ice.Locator._op_findObjectById.end(self, _r)

        """
        Find an adapter by id and return a proxy that contains
        its endpoints.
        Arguments:
        id -- The adapter id.
        context -- The request context for the invocation.
        Returns: The adapter proxy, or null if the adapter is not active.
        Throws:
        AdapterNotFoundException -- Raised if the adapter cannot be found.
        """
        def findAdapterById(self, id, context=None):
            return _M_Ice.Locator._op_findAdapterById.invoke(self, ((id, ), context))

        """
        Find an adapter by id and return a proxy that contains
        its endpoints.
        Arguments:
        id -- The adapter id.
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def findAdapterByIdAsync(self, id, context=None):
            return _M_Ice.Locator._op_findAdapterById.invokeAsync(self, ((id, ), context))

        """
        Find an adapter by id and return a proxy that contains
        its endpoints.
        Arguments:
        id -- The adapter id.
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_findAdapterById(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Ice.Locator._op_findAdapterById.begin(self, ((id, ), _response, _ex, _sent, context))

        """
        Find an adapter by id and return a proxy that contains
        its endpoints.
        Arguments:
        id -- The adapter id.
        Returns: The adapter proxy, or null if the adapter is not active.
        Throws:
        AdapterNotFoundException -- Raised if the adapter cannot be found.
        """
        def end_findAdapterById(self, _r):
            return _M_Ice.Locator._op_findAdapterById.end(self, _r)

        """
        Get the locator registry.
        Arguments:
        context -- The request context for the invocation.
        Returns: The locator registry.
        """
        def getRegistry(self, context=None):
            return _M_Ice.Locator._op_getRegistry.invoke(self, ((), context))

        """
        Get the locator registry.
        Arguments:
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def getRegistryAsync(self, context=None):
            return _M_Ice.Locator._op_getRegistry.invokeAsync(self, ((), context))

        """
        Get the locator registry.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_getRegistry(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Ice.Locator._op_getRegistry.begin(self, ((), _response, _ex, _sent, context))

        """
        Get the locator registry.
        Arguments:
        Returns: The locator registry.
        """
        def end_getRegistry(self, _r):
            return _M_Ice.Locator._op_getRegistry.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Ice.LocatorPrx.ice_checkedCast(proxy, '::Ice::Locator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Ice.LocatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Ice::Locator'
    _M_Ice._t_LocatorPrx = IcePy.defineProxy('::Ice::Locator', LocatorPrx)

    _M_Ice.LocatorPrx = LocatorPrx
    del LocatorPrx

    _M_Ice.Locator = Ice.createTempClass()
    class Locator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Locator', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Ice::Locator'

        @staticmethod
        def ice_staticId():
            return '::Ice::Locator'

        def findObjectById(self, id, current=None):
            """
            Find an object by identity and return a proxy that contains
            the adapter ID or endpoints which can be used to access the
            object.
            Arguments:
            id -- The identity.
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            Throws:
            ObjectNotFoundException -- Raised if the object cannot be found.
            """
            raise NotImplementedError("servant method 'findObjectById' not implemented")

        def findAdapterById(self, id, current=None):
            """
            Find an adapter by id and return a proxy that contains
            its endpoints.
            Arguments:
            id -- The adapter id.
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            Throws:
            AdapterNotFoundException -- Raised if the adapter cannot be found.
            """
            raise NotImplementedError("servant method 'findAdapterById' not implemented")

        def getRegistry(self, current=None):
            """
            Get the locator registry.
            Arguments:
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'getRegistry' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_LocatorDisp)

        __repr__ = __str__

    _M_Ice._t_LocatorDisp = IcePy.defineClass('::Ice::Locator', Locator, (), None, ())
    Locator._ice_type = _M_Ice._t_LocatorDisp

    Locator._op_findObjectById = IcePy.Operation('findObjectById', Ice.OperationMode.Idempotent, Ice.OperationMode.Nonmutating, True, None, (), (((), _M_Ice._t_Identity, False, 0),), (), ((), IcePy._t_ObjectPrx, False, 0), (_M_Ice._t_ObjectNotFoundException,))
    Locator._op_findAdapterById = IcePy.Operation('findAdapterById', Ice.OperationMode.Idempotent, Ice.OperationMode.Nonmutating, True, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_ObjectPrx, False, 0), (_M_Ice._t_AdapterNotFoundException,))
    Locator._op_getRegistry = IcePy.Operation('getRegistry', Ice.OperationMode.Idempotent, Ice.OperationMode.Nonmutating, False, None, (), (), (), ((), _M_Ice._t_LocatorRegistryPrx, False, 0), ())

    _M_Ice.Locator = Locator
    del Locator

_M_Ice._t_LocatorRegistry = IcePy.defineValue('::Ice::LocatorRegistry', Ice.Value, -1, (), False, True, None, ())

if 'LocatorRegistryPrx' not in _M_Ice.__dict__:
    _M_Ice.LocatorRegistryPrx = Ice.createTempClass()
    class LocatorRegistryPrx(Ice.ObjectPrx):

        """
        Set the adapter endpoints with the locator registry.
        Arguments:
        id -- The adapter id.
        proxy -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
        context -- The request context for the invocation.
        Throws:
        AdapterAlreadyActiveException -- Raised if an adapter with the same id is already active.
        AdapterNotFoundException -- Raised if the adapter cannot be found, or if the locator only allows registered adapters to set their active proxy and the adapter is not registered with the locator.
        """
        def setAdapterDirectProxy(self, id, proxy, context=None):
            return _M_Ice.LocatorRegistry._op_setAdapterDirectProxy.invoke(self, ((id, proxy), context))

        """
        Set the adapter endpoints with the locator registry.
        Arguments:
        id -- The adapter id.
        proxy -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def setAdapterDirectProxyAsync(self, id, proxy, context=None):
            return _M_Ice.LocatorRegistry._op_setAdapterDirectProxy.invokeAsync(self, ((id, proxy), context))

        """
        Set the adapter endpoints with the locator registry.
        Arguments:
        id -- The adapter id.
        proxy -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_setAdapterDirectProxy(self, id, proxy, _response=None, _ex=None, _sent=None, context=None):
            return _M_Ice.LocatorRegistry._op_setAdapterDirectProxy.begin(self, ((id, proxy), _response, _ex, _sent, context))

        """
        Set the adapter endpoints with the locator registry.
        Arguments:
        id -- The adapter id.
        proxy -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
        Throws:
        AdapterAlreadyActiveException -- Raised if an adapter with the same id is already active.
        AdapterNotFoundException -- Raised if the adapter cannot be found, or if the locator only allows registered adapters to set their active proxy and the adapter is not registered with the locator.
        """
        def end_setAdapterDirectProxy(self, _r):
            return _M_Ice.LocatorRegistry._op_setAdapterDirectProxy.end(self, _r)

        """
        Set the adapter endpoints with the locator registry.
        Arguments:
        adapterId -- The adapter id.
        replicaGroupId -- The replica group id.
        p -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
        context -- The request context for the invocation.
        Throws:
        AdapterAlreadyActiveException -- Raised if an adapter with the same id is already active.
        AdapterNotFoundException -- Raised if the adapter cannot be found, or if the locator only allows registered adapters to set their active proxy and the adapter is not registered with the locator.
        InvalidReplicaGroupIdException -- Raised if the given replica group doesn't match the one registered with the locator registry for this object adapter.
        """
        def setReplicatedAdapterDirectProxy(self, adapterId, replicaGroupId, p, context=None):
            return _M_Ice.LocatorRegistry._op_setReplicatedAdapterDirectProxy.invoke(self, ((adapterId, replicaGroupId, p), context))

        """
        Set the adapter endpoints with the locator registry.
        Arguments:
        adapterId -- The adapter id.
        replicaGroupId -- The replica group id.
        p -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def setReplicatedAdapterDirectProxyAsync(self, adapterId, replicaGroupId, p, context=None):
            return _M_Ice.LocatorRegistry._op_setReplicatedAdapterDirectProxy.invokeAsync(self, ((adapterId, replicaGroupId, p), context))

        """
        Set the adapter endpoints with the locator registry.
        Arguments:
        adapterId -- The adapter id.
        replicaGroupId -- The replica group id.
        p -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_setReplicatedAdapterDirectProxy(self, adapterId, replicaGroupId, p, _response=None, _ex=None, _sent=None, context=None):
            return _M_Ice.LocatorRegistry._op_setReplicatedAdapterDirectProxy.begin(self, ((adapterId, replicaGroupId, p), _response, _ex, _sent, context))

        """
        Set the adapter endpoints with the locator registry.
        Arguments:
        adapterId -- The adapter id.
        replicaGroupId -- The replica group id.
        p -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
        Throws:
        AdapterAlreadyActiveException -- Raised if an adapter with the same id is already active.
        AdapterNotFoundException -- Raised if the adapter cannot be found, or if the locator only allows registered adapters to set their active proxy and the adapter is not registered with the locator.
        InvalidReplicaGroupIdException -- Raised if the given replica group doesn't match the one registered with the locator registry for this object adapter.
        """
        def end_setReplicatedAdapterDirectProxy(self, _r):
            return _M_Ice.LocatorRegistry._op_setReplicatedAdapterDirectProxy.end(self, _r)

        """
        Set the process proxy for a server.
        Arguments:
        id -- The server id.
        proxy -- The process proxy.
        context -- The request context for the invocation.
        Throws:
        ServerNotFoundException -- Raised if the server cannot be found.
        """
        def setServerProcessProxy(self, id, proxy, context=None):
            return _M_Ice.LocatorRegistry._op_setServerProcessProxy.invoke(self, ((id, proxy), context))

        """
        Set the process proxy for a server.
        Arguments:
        id -- The server id.
        proxy -- The process proxy.
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def setServerProcessProxyAsync(self, id, proxy, context=None):
            return _M_Ice.LocatorRegistry._op_setServerProcessProxy.invokeAsync(self, ((id, proxy), context))

        """
        Set the process proxy for a server.
        Arguments:
        id -- The server id.
        proxy -- The process proxy.
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_setServerProcessProxy(self, id, proxy, _response=None, _ex=None, _sent=None, context=None):
            return _M_Ice.LocatorRegistry._op_setServerProcessProxy.begin(self, ((id, proxy), _response, _ex, _sent, context))

        """
        Set the process proxy for a server.
        Arguments:
        id -- The server id.
        proxy -- The process proxy.
        Throws:
        ServerNotFoundException -- Raised if the server cannot be found.
        """
        def end_setServerProcessProxy(self, _r):
            return _M_Ice.LocatorRegistry._op_setServerProcessProxy.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Ice.LocatorRegistryPrx.ice_checkedCast(proxy, '::Ice::LocatorRegistry', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Ice.LocatorRegistryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Ice::LocatorRegistry'
    _M_Ice._t_LocatorRegistryPrx = IcePy.defineProxy('::Ice::LocatorRegistry', LocatorRegistryPrx)

    _M_Ice.LocatorRegistryPrx = LocatorRegistryPrx
    del LocatorRegistryPrx

    _M_Ice.LocatorRegistry = Ice.createTempClass()
    class LocatorRegistry(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::LocatorRegistry', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Ice::LocatorRegistry'

        @staticmethod
        def ice_staticId():
            return '::Ice::LocatorRegistry'

        def setAdapterDirectProxy(self, id, proxy, current=None):
            """
            Set the adapter endpoints with the locator registry.
            Arguments:
            id -- The adapter id.
            proxy -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            Throws:
            AdapterAlreadyActiveException -- Raised if an adapter with the same id is already active.
            AdapterNotFoundException -- Raised if the adapter cannot be found, or if the locator only allows registered adapters to set their active proxy and the adapter is not registered with the locator.
            """
            raise NotImplementedError("servant method 'setAdapterDirectProxy' not implemented")

        def setReplicatedAdapterDirectProxy(self, adapterId, replicaGroupId, p, current=None):
            """
            Set the adapter endpoints with the locator registry.
            Arguments:
            adapterId -- The adapter id.
            replicaGroupId -- The replica group id.
            p -- The adapter proxy (a dummy direct proxy created by the adapter). The direct proxy contains the adapter endpoints.
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            Throws:
            AdapterAlreadyActiveException -- Raised if an adapter with the same id is already active.
            AdapterNotFoundException -- Raised if the adapter cannot be found, or if the locator only allows registered adapters to set their active proxy and the adapter is not registered with the locator.
            InvalidReplicaGroupIdException -- Raised if the given replica group doesn't match the one registered with the locator registry for this object adapter.
            """
            raise NotImplementedError("servant method 'setReplicatedAdapterDirectProxy' not implemented")

        def setServerProcessProxy(self, id, proxy, current=None):
            """
            Set the process proxy for a server.
            Arguments:
            id -- The server id.
            proxy -- The process proxy.
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            Throws:
            ServerNotFoundException -- Raised if the server cannot be found.
            """
            raise NotImplementedError("servant method 'setServerProcessProxy' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_LocatorRegistryDisp)

        __repr__ = __str__

    _M_Ice._t_LocatorRegistryDisp = IcePy.defineClass('::Ice::LocatorRegistry', LocatorRegistry, (), None, ())
    LocatorRegistry._ice_type = _M_Ice._t_LocatorRegistryDisp

    LocatorRegistry._op_setAdapterDirectProxy = IcePy.Operation('setAdapterDirectProxy', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_ObjectPrx, False, 0)), (), None, (_M_Ice._t_AdapterNotFoundException, _M_Ice._t_AdapterAlreadyActiveException))
    LocatorRegistry._op_setReplicatedAdapterDirectProxy = IcePy.Operation('setReplicatedAdapterDirectProxy', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_ObjectPrx, False, 0)), (), None, (_M_Ice._t_AdapterNotFoundException, _M_Ice._t_AdapterAlreadyActiveException, _M_Ice._t_InvalidReplicaGroupIdException))
    LocatorRegistry._op_setServerProcessProxy = IcePy.Operation('setServerProcessProxy', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, True, None, (), (((), IcePy._t_string, False, 0), ((), _M_Ice._t_ProcessPrx, False, 0)), (), None, (_M_Ice._t_ServerNotFoundException,))

    _M_Ice.LocatorRegistry = LocatorRegistry
    del LocatorRegistry

_M_Ice._t_LocatorFinder = IcePy.defineValue('::Ice::LocatorFinder', Ice.Value, -1, (), False, True, None, ())

if 'LocatorFinderPrx' not in _M_Ice.__dict__:
    _M_Ice.LocatorFinderPrx = Ice.createTempClass()
    class LocatorFinderPrx(Ice.ObjectPrx):

        """
        Get the locator proxy implemented by the process hosting this
        finder object. The proxy might point to several replicas.
        Arguments:
        context -- The request context for the invocation.
        Returns: The locator proxy.
        """
        def getLocator(self, context=None):
            return _M_Ice.LocatorFinder._op_getLocator.invoke(self, ((), context))

        """
        Get the locator proxy implemented by the process hosting this
        finder object. The proxy might point to several replicas.
        Arguments:
        context -- The request context for the invocation.
        Returns: A future object for the invocation.
        """
        def getLocatorAsync(self, context=None):
            return _M_Ice.LocatorFinder._op_getLocator.invokeAsync(self, ((), context))

        """
        Get the locator proxy implemented by the process hosting this
        finder object. The proxy might point to several replicas.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        context -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation.
        """
        def begin_getLocator(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Ice.LocatorFinder._op_getLocator.begin(self, ((), _response, _ex, _sent, context))

        """
        Get the locator proxy implemented by the process hosting this
        finder object. The proxy might point to several replicas.
        Arguments:
        Returns: The locator proxy.
        """
        def end_getLocator(self, _r):
            return _M_Ice.LocatorFinder._op_getLocator.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Ice.LocatorFinderPrx.ice_checkedCast(proxy, '::Ice::LocatorFinder', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Ice.LocatorFinderPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Ice::LocatorFinder'
    _M_Ice._t_LocatorFinderPrx = IcePy.defineProxy('::Ice::LocatorFinder', LocatorFinderPrx)

    _M_Ice.LocatorFinderPrx = LocatorFinderPrx
    del LocatorFinderPrx

    _M_Ice.LocatorFinder = Ice.createTempClass()
    class LocatorFinder(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::LocatorFinder', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Ice::LocatorFinder'

        @staticmethod
        def ice_staticId():
            return '::Ice::LocatorFinder'

        def getLocator(self, current=None):
            """
            Get the locator proxy implemented by the process hosting this
            finder object. The proxy might point to several replicas.
            Arguments:
            current -- The Current object for the invocation.
            Returns: A future object for the invocation.
            """
            raise NotImplementedError("servant method 'getLocator' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Ice._t_LocatorFinderDisp)

        __repr__ = __str__

    _M_Ice._t_LocatorFinderDisp = IcePy.defineClass('::Ice::LocatorFinder', LocatorFinder, (), None, ())
    LocatorFinder._ice_type = _M_Ice._t_LocatorFinderDisp

    LocatorFinder._op_getLocator = IcePy.Operation('getLocator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Ice._t_LocatorPrx, False, 0), ())

    _M_Ice.LocatorFinder = LocatorFinder
    del LocatorFinder

# End of module Ice

Ice.sliceChecksums["::Ice::AdapterAlreadyActiveException"] = "bf5f24acc569fea5251d9f8532a83ab8"
Ice.sliceChecksums["::Ice::AdapterNotFoundException"] = "55f1a93f62d3937d94533ad2894ad9c"
Ice.sliceChecksums["::Ice::InvalidReplicaGroupIdException"] = "7876104b5711f2b49ae078686a03f"
Ice.sliceChecksums["::Ice::Locator"] = "5efd321bc74cc794fed432e3f5186d9"
Ice.sliceChecksums["::Ice::LocatorFinder"] = "19b7a40de7be4cae27f4f8d867bd682"
Ice.sliceChecksums["::Ice::LocatorRegistry"] = "e9f8ca2c8ce174f9214961e8596b7ed"
Ice.sliceChecksums["::Ice::ObjectNotFoundException"] = "23fe4ef042d6496b97c4e2313f6c4675"
Ice.sliceChecksums["::Ice::ServerNotFoundException"] = "bafa988368a55c1471e3c7be16baa74"
