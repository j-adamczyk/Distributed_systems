//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `IoT.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IoT;

public class CoffeeMaker extends IoTDevice
{
    public CoffeeMaker()
    {
        super();
    }

    public CoffeeMaker(String name, String deviceType, String serialNumber, short temperature, short minTemperature, short maxTemperature, short volume, short minVolume, short maxVolume, CoffeeType[] allowedTypes)
    {
        super(name, deviceType, serialNumber);
        this.temperature = temperature;
        this.minTemperature = minTemperature;
        this.maxTemperature = maxTemperature;
        this.volume = volume;
        this.minVolume = minVolume;
        this.maxVolume = maxVolume;
        this.allowedTypes = allowedTypes;
    }

    public short temperature;

    public short minTemperature;

    public short maxTemperature;

    public short volume;

    public short minVolume;

    public short maxVolume;

    public CoffeeType[] allowedTypes;

    public CoffeeMaker clone()
    {
        return (CoffeeMaker)super.clone();
    }

    public static String ice_staticId()
    {
        return "::IoT::CoffeeMaker";
    }

    @Override
    public String ice_id()
    {
        return ice_staticId();
    }

    /** @hidden */
    public static final long serialVersionUID = -1369974793L;

    /** @hidden */
    @Override
    public void _iceWriteImpl(com.zeroc.Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, false);
        ostr_.writeShort(temperature);
        ostr_.writeShort(minTemperature);
        ostr_.writeShort(maxTemperature);
        ostr_.writeShort(volume);
        ostr_.writeShort(minVolume);
        ostr_.writeShort(maxVolume);
        allowedCoffeeTypesHelper.write(ostr_, allowedTypes);
        ostr_.endSlice();
        super._iceWriteImpl(ostr_);
    }

    /** @hidden */
    @Override
    public void _iceReadImpl(com.zeroc.Ice.InputStream istr_)
    {
        istr_.startSlice();
        temperature = istr_.readShort();
        minTemperature = istr_.readShort();
        maxTemperature = istr_.readShort();
        volume = istr_.readShort();
        minVolume = istr_.readShort();
        maxVolume = istr_.readShort();
        allowedTypes = allowedCoffeeTypesHelper.read(istr_);
        istr_.endSlice();
        super._iceReadImpl(istr_);
    }
}
